using UnityEngine;
using System.Collections;
using System.Collections.Generic;


public enum EnemyAttackType
{
    Melee,       // 돌진형
    Laser,       // 레이저 발사 (Gaster Blaster류)
    Bullet,      // 일반 탄환
    Sniper,      // 조준 후 강한 탄환
    Shotgun,     // 산탄
    Buff,        // 버프/자힐/강화
    Predictive,  // 예측 사격
    Trap_Laser,  // 설치형 함정
    Trap_Bullet, 
    Trap_Melee,
    Undying,     // 죽지 않음 (불사형, 샌즈류)
    Special,      // 기타 특수
    None
}
public enum TrapDir { 
    Left,
    LeftUp,
    LeftDown,
    Right,
    RightUp,
    RightDown,
    Up,
    Down,
    None
}

public class EnemyController : LivingObject
{
    // 새롭게 사용할 프리팹 이름 (생략 가능, 내부에서 자동 처리)
    [SerializeField] private string bulletPrefabName = "Enemy_None";
    public float bulletSpeed = 10f; // 총알 발사 속도
    public Weapon weaponData;          // 현재 사용 중인 총의 정보
    public Transform WeaponTransform;  // 총 모델의 Transform
    public Transform hand;  // 총 모델의 Transform 
    public ObjectState objectState;
    public float minDistance = 3f;  // 플레이어와의 최소 유지 거리
    public float maxDistance = 6f;  // 플레이어와의 최대 유지 거리

    public float shootCoolTime = 4;
    float curTime = 0;
    public bool isMove;
    public EnemyAttackType attackType;
    public TrapDir dir;

    [Header("임시 체력")]
    public float testhp = 10000;


    [Header("트랩 관련")]
    public bool isTrapActive = true;     // 트랩 활성화 여부
    public float trapShootInterval = 2f; // 트랩 발사 주기
    private float trapTimer = 0f;        // 트랩용 타이머
    [Header("레이저 관련")]
    public GameObject laserPrefab; // LaserFadeOut 프리팹
    private GameObject currentLaser; // 현재 생성된 레이저
    public bool iskeepLaser;

    private bool undying = false;

    protected override void Awake()
    {
        base.Awake(); // LivingObject의 Awake 메서드 호출
        //animator.GetComponent<Animator>();
    }

     void Start()
    {
        maxHealth = testhp;
        health = maxHealth;
        speed = 2;
        weaponData = new Weapon();
        if (IsTrapType())
        {
            RotateToTrapDirection(); // 트랩일 경우 방향 회전
        }
    }

    protected override void Update()
    {
        base.Update();
        if (!isDie)
        {
            if (attackType == EnemyAttackType.None)
                return;
            // 트랩은 플레이어 추격하지 않음
            if (!IsTrapType())
            {
                float distanceToPlayer = Vector2.Distance(gameManager.GetPlayerData().position, transform.position);

                if (distanceToPlayer > maxDistance && isMove)
                    ChasePlayer();
                else if (distanceToPlayer < minDistance)
                    MoveAwayFromPlayer();
                else
                    StopMoving();
            }
            else
            {
                StopMoving(); // 트랩은 고정
            }

            if (IsTrapType())
            {
                if (!isTrapActive) return;

                trapTimer += Time.deltaTime;
                if (trapTimer >= trapShootInterval)
                {
                    trapTimer = 0f;
                    Shoot(); // 트랩도 Shoot()을 이용함
                }
            }
            else
            {
                float curmagazine = weaponData.current_magazine;
                curTime += Time.deltaTime;

                Vector3 playerPosition = gameManager.GetPlayerData().position;
                Vector2 direction = (playerPosition - WeaponTransform.position).normalized;
                hand.up = direction;

                if (curTime > shootCoolTime && curmagazine > 0)
                {
                    Shoot();
                    weaponData.current_magazine -= 1;
                    weaponData.current_Ammo -= 1;
                    curTime = 0;
                }

                // 탄약 재장전
                if (weaponData.current_Ammo < weaponData.maxAmmo &&
                    weaponData.current_magazine < weaponData.magazine)
                {
                    weaponData.current_magazine = weaponData.magazine;
                }
            }
        }
        else
            StopMoving();

    }

    bool IsTrapType()
    {
        return attackType == EnemyAttackType.Trap_Bullet ||
               attackType == EnemyAttackType.Trap_Laser ||
               attackType == EnemyAttackType.Trap_Melee;
    }
    void ChasePlayer()
    {
        Vector2 direction = (gameManager.GetPlayerData().position - transform.position).normalized;
        rigid.velocity = direction * speed;
    }

    void MoveAwayFromPlayer()
    {
        Vector2 direction = (transform.position - gameManager.GetPlayerData().position).normalized;
        rigid.velocity = direction * speed;
    }

    void StopMoving()
    {
        rigid.velocity = Vector2.zero;
    }

    void Shoot()
    {
        string prefabName = GetBulletPrefabName(); // 타입에 따라 프리팹명 가져오기

        Vector2 spawnPos = WeaponTransform.position;
        Quaternion spawnRot = WeaponTransform.rotation;
        Vector2 direction = hand.up;

        if (attackType != EnemyAttackType.Trap_Laser && attackType != EnemyAttackType.Laser)
        {
            BattleManager.Instance.SpawnBulletAtPosition(
                GetBulletType(),          // 총알 종류 enum
                spawnPos,
                spawnRot,
                direction,
                prefabName,
                0,      // size
                0f,     // delay
                false,  // isFriend
                5f,     // maxRange
                bulletSpeed,
                1f,     // accuracy
                1f      // damage
            );
                    SoundManager.Instance.SFXPlay("shotgun_shot_01", 218);
            weaponData.current_magazine = weaponData.magazine;
        }
        else
        {
            FireLaser();
        }

    }
    void FireLaser()
    {
        if (currentLaser != null) return;

        currentLaser = Instantiate(laserPrefab, WeaponTransform.position, Quaternion.identity);
        LaserFadeOut laser = currentLaser.GetComponent<LaserFadeOut>();

        if (laser != null)
        {
            laser.laserOrigin = WeaponTransform;
            laser.obstacleMask = LayerMask.GetMask("Wall", "Barrier", "Player");
            laser.thickness = 0.6f;
            laser.growSpeed = 50f;
            laser.fadeDuration = 0.5f;
            laser.dotInterval = 0.2f;
            laser.autoFade = iskeepLaser; //  자동 페이드 설정
            laser.enabled = true;
        }

        currentLaser.transform.up = GetDirectionFromTrapDir(dir);

        SoundManager.Instance.SFXPlay("charge", 63);
        SoundManager.Instance.SFXPlayLoop(226, 0.05f); //  반복 사운드 재생
    }


    IEnumerator DisableLaserAfterSeconds(float duration)
    {
        yield return new WaitForSeconds(duration);

        if (currentLaser != null)
        {
         //    LaserFadeOut laser = currentLaser.GetComponent<LaserFadeOut>();
            currentLaser = null;
        }
    }
    public void DeactivateLaser()
    {
        if (currentLaser != null)
        {
            SoundManager.Instance.SFXStopLoop(226); //  반복 사운드 종료
            currentLaser = null;
        }
    }

    BulletType GetBulletType()
    {
        switch (attackType)
        {
            case EnemyAttackType.Bullet:
                return BulletType.Normal;
            case EnemyAttackType.Shotgun:
                return BulletType.Normal;
            case EnemyAttackType.Laser:
            case EnemyAttackType.Trap_Laser:
                return BulletType.Laser;
            case EnemyAttackType.Predictive:
                return BulletType.Speed;
            case EnemyAttackType.Trap_Bullet:
            case EnemyAttackType.Trap_Melee:
                return BulletType.Directional;
            default:
                return BulletType.Normal;
        }
    }
    string GetBulletPrefabName()
    {
        // 우선 무기에 이름이 지정되어 있으면 그걸 쓰고, 없으면 타입으로 분기

        switch (attackType)
        {
            case EnemyAttackType.Laser:
            case EnemyAttackType.Trap_Laser:
                return "Laser_Enemy";

            case EnemyAttackType.Trap_Bullet:
            case EnemyAttackType.Bullet:
                return "Enemy_None";

            case EnemyAttackType.Shotgun:
                return "Enemy_None";

            case EnemyAttackType.Sniper:
                return "Enemy_None";

            default:
                return "Enemy_None";
        }
    }
    Vector2 GetDirectionFromTrapDir(TrapDir dir)
    {
        Vector2 direction;

        switch (dir)
        {
            case TrapDir.Left: direction = Vector2.left; break;
            case TrapDir.LeftUp: direction = new Vector2(-1, 1).normalized; break;
            case TrapDir.LeftDown: direction = new Vector2(-1, -1).normalized; break;
            case TrapDir.Right: direction = Vector2.right; break;
            case TrapDir.RightUp: direction = new Vector2(1, 1).normalized; break;
            case TrapDir.RightDown: direction = new Vector2(1, -1).normalized; break;
            case TrapDir.Up: direction = Vector2.up; break;
            case TrapDir.Down: direction = Vector2.down; break;
            default: direction = Vector2.up; break;
        }

        return direction;
    }

    void RotateToTrapDirection()
    {
        Vector2 dirVector = GetDirectionFromTrapDir(dir);
        if (dirVector == Vector2.zero) return;

        // 원래는 Vector2.right → 이제는 Vector2.up 기준으로 회전 계산
        float angle = Vector2.SignedAngle(Vector2.up, dirVector);
        transform.rotation = Quaternion.Euler(0, 0, angle);
    }

}
